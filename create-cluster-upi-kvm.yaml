- name: Create clusters UPI on KVM
  hosts: localhost
  gather_facts: false
  become: true
  become_method: sudo

  vars:
    mirror_url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/"

  tasks:
    - name: Ensure necessary packages are installed
      ansible.builtin.yum:
        name:
          - qemu-kvm
          - libvirt
          - virt-install
          - virt-manager
          - guestfs-tools
        state: present

    - name: Ensure libvirtd service is running
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

    - name: Configuring networkmanager to use dnsmasq
      ansible.builtin.copy:
        dest: "/etc/NetworkManager/conf.d/nm-dns.conf"
        content: |
          [main]
          dns=dnsmasq
      register: configdnsmasq

    - name: Create the OCP version cache directory if it does not exist
      ansible.builtin.file:
        path: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/"
        state: directory
        mode: '0755'

    - name: Check if the installer file already exists on cache
      ansible.builtin.stat:
        path: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/openshift-install-linux-{{ ocpversion }}.tar.gz"
      register: installfile

    - name: Download installer openshift-install-linux.tar.gz to cache
      ansible.builtin.get_url:
        url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/openshift-install-linux.tar.gz"
        dest: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/openshift-install-linux-{{ ocpversion }}.tar.gz"
        mode: '0644'
      when: installfile.stat is defined and not installfile.stat.exists

    - name: Create cluster network conf on dnsmasq
      ansible.builtin.template:
        src: "cluster-network.conf.j2"
        dest: "{{ dnsdir }}/{{ clustername }}.conf"
        mode: '0644'
        selevel: s0
        serole: object_r
        setype: dnsmasq_etc_t
        seuser: system_u
      register: dnsmasq

    - name: Create addnhosts file
      ansible.builtin.template:
        src: "dnsmasq.openshift.addnhosts.j2"
        dest: "/etc/dnsmasq.{{ clustername }}.addnhosts"
        mode: '0644'
      register: addnhosts

    - name: Restart Network Manager when configuring dnsmasq
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: dnsmasq.changed

    - name: Restart libvirt when configuring dnsmasq
      ansible.builtin.service:
        name: libvirtd
        state: restarted
      when: dnsmasq.changed

    - name: Create cluster directory
      ansible.builtin.file:
        path: "{{ clusters_dir }}/{{ clustername }}"
        state: "directory"
        mode: "0755"

    - name: Copy openshift-install.tar.gz to cluster dir
      ansible.builtin.copy:
        remote_src: true
        src: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/openshift-install-linux-{{ ocpversion }}.tar.gz"
        dest: "{{ clusters_dir }}/{{ clustername }}/"

    - name: Untar on openshift-install-linux.tar.gz file
      ansible.builtin.unarchive:
        remote_src: true
        src: "{{ clusters_dir }}/{{ clustername }}/openshift-install-linux-{{ ocpversion }}.tar.gz"
        dest: "{{ clusters_dir }}/{{ clustername }}"

    - name: Copy rhcos.iso to cluster dir to master
      ansible.builtin.copy:
        remote_src: true
        src: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos.iso"
        dest: "{{ clusters_dir }}/{{ clustername }}/rhcos-master.iso"

    - name: Copy rhcos.iso to cluster dir to worker
      ansible.builtin.copy:
        remote_src: true
        src: "{{ clusters_dir }}/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos.iso"
        dest: "{{ clusters_dir }}/{{ clustername }}/rhcos-worker.iso"

    - name: Copy install-config.yaml
      ansible.builtin.template:
        src: install-config.yaml-upi.j2
        dest: "{{ clusters_dir }}/{{ clustername }}/install-config.yaml"
        mode: '0644'

    # - name: Run create cluster manifests
    #   ansible.builtin.command: "./openshift-install create manifests"
    #   args:
    #     chdir: "{{ clusters_dir }}/{{ clustername }}/"
    #   register: createmanifests
    #   changed_when: createmanifests.rc == 0

    # - name: Creating CSR Approver manifests
    #   ansible.builtin.template:
    #     src: "{{ item }}.yaml.j2"
    #     dest: "{{ clusters_dir }}/{{ clustername }}/openshift/99_{{ item }}.yaml"
    #     mode: '0644'
    #   loop:
    #     - csr-approver-sa
    #     - csr-approver-cr
    #     - csr-approver-crb
    #     - csr-approver-rb
    #     - csr-approver-cronjob

    - name: Run create single-node-ignition-config files
      ansible.builtin.command: "./openshift-install create single-node-ignition-config"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      register: install
      changed_when: true

    - name: Add bootstrap.ign to rhcos-master.iso
      ansible.builtin.command: "coreos-installer iso ignition embed -fi bootstrap-in-place-for-live-iso.ign rhcos-master.iso"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      register: rhcosmaster
      changed_when: true

    - name: Add bootstrap.ign to rhcos-worker.iso
      ansible.builtin.command: "coreos-installer iso ignition embed -fi worker.ign rhcos-worker.iso"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      register: rhcosmaster
      changed_when: true

    - name: Create virtual machines disks when SNO
      ansible.builtin.command: "qemu-img create -f qcow2 {{ clustername }}-master-0.qcow2 120G"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      register: qcow2master
      changed_when: true

    - name: Create worker disks
      ansible.builtin.command: "qemu-img create -f qcow2 {{ clustername }}-worker-{{ item }}.qcow2 120G"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      with_sequence: count={{ n_worker }} start=0
      when: n_worker != 0

    - name: Define KVM VMs when SNO
      ansible.builtin.command: virt-install --import --name {{ clustername }}-master-0   \
            --disk {{ clusters_dir }}/{{ clustername }}/master-0.qcow2,bus=virtio,size=120 \
            --disk {{ clusters_dir }}/{{ clustername }}/rhcos-master.iso,device=cdrom \
            --boot hd,cdrom --noreboot --noautoconsole \
            --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9-unknown --network network={{ kvmnetwork }},model=virtio
      register: createnodes
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      changed_when: createnodes.rc == 0

    - name: Wait for master to get mac address
      ansible.builtin.shell: "virsh dumpxml {{ clustername }}-master-0 | grep 'mac address' | grep 'mac address' | sed 's/.*mac address='\\''\\([^'\\'']*\\)'\\''.*/\\1/'"
      register: master_info
      until: master_info is defined and master_info.stdout != ""
      retries: "180"
      delay: "1"

    - name: Adding master mac on DHCP
      community.libvirt.virt_net:
        name: "{{ kvmnetwork }}"
        command: modify
        xml: "<host mac='{{ master_info.stdout }}' ip='{{ master0ip }}'/>"
      register: master_info

    # - name: Adding master mac on DHCP
    #   ansible.builtin.shell: "virsh net-update {{ kvmnetwork }} add ip-dhcp-host --xml \"<host mac='{{ master_info.stdout }}' \
    #                           ip='{{ master0ip }}' name='{{ clustername }}-master-0.chiaret.to'/>\" --live --config"
    #   register: master_info

    # - name: Restart Network Manager when configuring dnsmasq
    #   ansible.builtin.service:
    #     name: NetworkManager
    #     state: restarted

    # - name: Restart libvirt when configuring dnsmasq
    #   ansible.builtin.service:
    #     name: libvirtd
    #     state: restarted

    - name: Define KVM Workers
      ansible.builtin.command: virt-install  --import --name {{ clustername }}-worker-{{ item }}   \
            --disk {{ clusters_dir }}/{{ clustername }}/worker-{{ item }}.qcow2,bus=virtio,size=120 \
            --disk {{ clusters_dir }}/{{ clustername }}/rhcos-worker.iso,device=cdrom \
            --boot hd,cdrom --noreboot --noautoconsole \
            --ram {{ worker_mem }} --cpu host --vcpus {{ worker_cpu }} --os-variant rhel9-unknown --network network={{ kvmnetwork }},model=virtio \
      register: createworkers
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      changed_when: createworkers.rc == 0
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Get a list of all virtual machines
      ansible.builtin.command: virsh list --all --name
      register: vms
      changed_when: vms.rc == 0

    - name: Filter VMs containing 'worker' in their names
      ansible.builtin.set_fact:
        worker_vms: "{{ vms.stdout_lines | select('search', '-worker') }}"

    - name: Gather MAC addresses of VMs
      ansible.builtin.command: virsh domiflist {{ item }}
      loop: "{{ worker_vms }}"
      register: vm_interfaces
      changed_when: vm_interfaces.rc == 0

    - name: Extract MAC addresses from interface information
      ansible.builtin.set_fact:
        mac_addresses: "{{ mac_addresses | default([]) + [item.stdout | regex_findall('([\\w:]{17})')] }}"
      loop: "{{ vm_interfaces.results }}"

    # - name: Display MAC addresses
    #   debug:
    #     var: mac_addresses

    - name: Adding worker mac on DHCP
      community.libvirt.virt_net:
        name: "{{ kvmnetwork }}"
        command: modify
        xml: "<host mac='{{ mac_addresses[item | int - 1] | first }}' ip='{{ worker_ips[item | int - 1] }}'/>"
      register: master_info
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Starting virtual machines when SNO
      ansible.builtin.command: "virsh start {{ clustername }}-{{ item }}"
      register: startsnovms
      changed_when: startsnovms.rc == 0
      with_items:
        - "master-0"

    - name: Starting worker nodes
      ansible.builtin.command: "virsh start {{ clustername }}-worker-{{ item }}"
      register: startworkervms
      changed_when: startworkervms.rc == 0
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Sleeping for 20 minutes before to check if cluster has been installed
      ansible.builtin.pause:
        minutes: 20

    - name: Run wait-for install-complete
      ansible.builtin.command: "./openshift-install wait-for install-complete"
      args:
        chdir: "{{ clusters_dir }}/{{ clustername }}"
      async: 3600
      poll: 0
      register: install
      changed_when: true

    - name: Check if the cluster has been installed
      ansible.builtin.async_status:
        jid: "{{ install.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      delay: 10
      retries: 600

    - name: Disabling master as worker
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: present
        template: "scheduler.yaml.j2"
      when: sno != "true"

    - name: Pause cronjob ocp-csr-approver
      kubernetes.core.k8s:
        kubeconfig: "{{ clusters_dir }}/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: "ocp-csr-approver"
            namespace: "ocp-csr-approver"
          spec:
            suspend: true
