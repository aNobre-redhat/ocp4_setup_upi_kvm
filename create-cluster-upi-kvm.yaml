- name: Create clusters UPI on KVM
  hosts: localhost
  gather_facts: false
  become: true
  become_method: sudo

  vars:
    mirror_url: "https://mirror.openshift.com/pub/openshift-v4/x86_64/dependencies/rhcos/"

  tasks:
    - name: Create cluster directory directory
      ansible.builtin.file:
        path: "/ocp-clusters/{{ clustername }}"
        state: "directory"
        mode: "0755"

    - name: Download installer openshift-install-linux.tar.gz
      ansible.builtin.get_url:
        url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/openshift-install-linux.tar.gz"
        dest: "/ocp-clusters/{{ clustername }}/openshift-install-linux.tar.gz"
        mode: '0644'

    - name: Untar on openshift-install-linux.tar.gz file
      ansible.builtin.unarchive:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/openshift-install-linux.tar.gz"
        dest: "/ocp-clusters/{{ clustername }}"

    - name: Copy install-config.yaml
      ansible.builtin.template:
        src: install-config.yaml-upi.j2
        dest: /ocp-clusters/{{ clustername }}/install-config.yaml
        mode: '0644'

    - name: Run create cluster manifests
      ansible.builtin.command: "./openshift-install create manifests"
      args:
        chdir: "/ocp-clusters/{{ clustername }}/"
      register: createmanifests
      changed_when: createmanifests.rc == 0

    - name: Getting the infraid
      ansible.builtin.command: jq -r '.["*installconfig.ClusterID"].InfraID' /ocp-clusters/{{ clustername }}/.openshift_install_state.json
      register: infraid
      changed_when: infraid.rc == 0

    - name: Configuring master as schedulable
      ansible.builtin.replace:
        path: "/ocp-clusters/{{ clustername }}/manifests/cluster-scheduler-02-config.yml"
        regexp: "mastersSchedulable: false"
        replace: "mastersSchedulable: true"

    - name: Creating CSR Approver manifests
      ansible.builtin.template:
        src: "{{ item }}.yaml.j2"
        dest: /ocp-clusters/{{ clustername }}/openshift/99_{{ item }}.yaml
        mode: '0644'
      loop:
        - csr-approver-sa
        - csr-approver-cr
        - csr-approver-crb
        - csr-approver-rb
        - csr-approver-cronjob

    - name: Ensure necessary packages are installed
      ansible.builtin.yum:
        name:
          - qemu-kvm
          - libvirt
          - virt-install
          - virt-manager
          - guestfs-tools
        state: present

    - name: Ensure libvirtd service is running
      ansible.builtin.service:
        name: libvirtd
        state: started
        enabled: true

    - name: Run create ignition files
      ansible.builtin.command: "./openshift-install create ignition-configs"
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      register: install
      changed_when: true

    - name: Create the OCP version cache directory if it does not exist
      ansible.builtin.file:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/"
        state: directory
        mode: '0755'

    - name: Check if the CentOS-7-x86_64-GenericCloud.qcow2 file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/CentOS-7-x86_64-GenericCloud.qcow2"
      register: centosfile

    - name: Check if the RHCOS file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-qemu.x86_64.qcow2"
      register: rhcosfile

    - name: Check if the initramfs file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/initramfs.img"
      register: initramfsfile

    - name: Check if the rhcos-live-kernel-x86_64 file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/vmlinuz"
      register: kernelfile

    - name: Check if the rhcos-live-rootfs.x86_64.img file already exists on cache
      ansible.builtin.stat:
        path: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-live-rootfs.x86_64.img"
      register: rootfsfile

    - name: Download RHCOS images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-qemu.x86_64.qcow2.gz"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-qemu.x86_64.qcow2.gz"
      when: rhcosfile.stat is defined and not rhcosfile.stat.exists

    - name: Download CentOS qcow2 file
      ansible.builtin.get_url:
        url: "https://cloud.centos.org/centos/7/images/CentOS-7-x86_64-GenericCloud.qcow2"
        dest: "/ocp-clusters/.cache/CentOS-7-x86_64-GenericCloud.qcow2"
      when: centosfile.stat is defined and not centosfile.stat.exists

    - name: Download rootfs file
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-rootfs.x86_64.img"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/rhcos-live-rootfs.x86_64.img"
      when: rootfsfile.stat is defined and not rootfsfile.stat.exists

    - name: Download initramfs images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-initramfs.x86_64.img"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/initramfs.img"
      when: initramfsfile.stat is defined and not initramfsfile.stat.exists

    - name: Download rhcos-live-kernel-x86_64 images
      ansible.builtin.get_url:
        url: "{{ mirror_url  }}{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/latest/rhcos-live-kernel-x86_64"
        dest: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/vmlinuz"
      when: kernelfile.stat is defined and not kernelfile.stat.exists

    - name: Create rhcos-install directory directory
      ansible.builtin.file:
        path: "/ocp-clusters/{{ clustername }}/rhcos-install"
        state: "directory"
        mode: "0755"

    - name: Copy files to rhcos-install directory
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/.cache/{{ ocpversion | regex_replace('(\\d+\\.\\d+).*', '\\1') }}/{{ item }}"
        dest: "/ocp-clusters/{{ clustername }}/rhcos-install/"
      with_items:
        - vmlinuz
        - initramfs.img
        - rhcos-qemu.x86_64.qcow2.gz
        - rhcos-live-rootfs.x86_64.img

    - name: Extract RHCOS image
      ansible.builtin.command: "gunzip -f -d /ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2.gz"
      register: extractdfile
      changed_when: extractdfile.rc == 0

    - name: Resizing RHCOS image
      ansible.builtin.command: "qemu-img resize /ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2 120G"
      register: resizeqcow2
      changed_when: resizeqcow2.rc == 0

    - name: Create treeinfo file
      ansible.builtin.template:
        src: treeinfo.j2
        dest: /ocp-clusters/{{ clustername }}/rhcos-install/.treeinfo
        mode: '0644'

    - name: Create tmpws.service file
      ansible.builtin.template:
        src: tmpws.service.j2
        dest: /ocp-clusters/{{ clustername }}/tmpws.service
        mode: '0644'

    - name: Create ifcfg-eth0 file
      ansible.builtin.template:
        src: ifcfg-eth0.j2
        dest: /ocp-clusters/{{ clustername }}/ifcfg-eth0
        mode: '0644'

    - name: Create haproxy.cfg file
      ansible.builtin.template:
        src: haproxy.cfg-kvm.j2
        dest: /ocp-clusters/{{ clustername }}/haproxy.cfg
        mode: '0644'

    - name: Create LB disk
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/.cache/CentOS-7-x86_64-GenericCloud.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-lb.qcow2"

    - name: Create ssh file
      ansible.builtin.copy:
        remote_src: true
        content: "{{ ssh_rsa }}"
        dest: "/ocp-clusters/{{ clustername }}/id_rsa.pub"

    - name: Customize LB for OpenShift nodes
      ansible.builtin.command: virt-customize -a "{{ infraid.stdout }}-lb.qcow2" \
                              --uninstall cloud-init --ssh-inject root:file:"/ocp-clusters/{{ clustername }}/id_rsa.pub" --selinux-relabel \
                              --run-command "sed -i s/mirror.centos.org/vault.centos.org/g /etc/yum.repos.d/*.repo" \
                              --run-command "sed -i s/^#.*baseurl=http/baseurl=http/g /etc/yum.repos.d/*.repo" \
                              --install haproxy --install bind-utils \
                              --copy-in bootstrap.ign:/opt/ --copy-in master.ign:/opt/ --copy-in worker.ign:/opt/ \
                              --copy-in rhcos-install/vmlinuz:/opt/ \
                              --copy-in rhcos-install/rhcos-live-rootfs.x86_64.img:/opt/ \
                              --copy-in ifcfg-eth0:/etc/sysconfig/network-scripts/ \
                              --copy-in tmpws.service:/etc/systemd/system/ \
                              --copy-in haproxy.cfg:/etc/haproxy/ \
                              --edit /etc/selinux/config:'s/^SELINUX=.*/SELINUX=disabled/g' \
                              --run-command "systemctl daemon-reload" \
                              --run-command "systemctl enable tmpws.service" \
                              --run-command "systemctl enable haproxy"

      register: customizelb
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: customizelb.rc == 0

    - name: Define and start LB
      ansible.builtin.command: virt-install --import --name {{ infraid.stdout }}-lb --disk "{{ infraid.stdout }}-lb.qcow2" \
                              --memory 1024 --cpu host --vcpus 4 --os-variant rhel7-unknown --network network={{ kvmnetwork }},model=virtio \
                              --noautoconsole --autostart
      register: definelb
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: definelb.rc == 0
      become: true
      become_method: ansible.builtin.sudo

    - name: Create virtual machines disks when 3 node cluster
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-{{ item }}.qcow2"
      with_items:
        - "bootstrap"
        - "master-0"
        - "master-1"
        - "master-2"
        - "worker-0"
        - "worker-1"
      when: sno == "false"

    - name: Create virtual machines disks when SNO
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-{{ item }}.qcow2"
      with_items:
        - "bootstrap"
        - "master-0"
      when: sno == "true"

    - name: Create worker disks
      ansible.builtin.copy:
        remote_src: true
        src: "/ocp-clusters/{{ clustername }}/rhcos-install/rhcos-qemu.x86_64.qcow2"
        dest: "/ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-worker-{{ item }}.qcow2"
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Define and start bootstrap
      ansible.builtin.command: virt-install --name {{ infraid.stdout }}-bootstrap \
            --disk /ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-bootstrap.qcow2,bus=virtio,size=120 \
            --ram "16000" --cpu host --vcpus "8" --os-variant rhel9.0 --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://{{ lbvip }}:1234/rhcos-live-rootfs.x86_64.img \
            ip={{ bootstrapip }}::{{ hostgw }}:{{ hostnw }}:{{ infraid.stdout }}-bootstrap:enp1s0:none nameserver={{ hostns }} \
            coreos.inst.ignition_url=http://{{ lbvip }}:1234/bootstrap.ign' --autostart
      register: bootstrapnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: bootstrapnodes.rc == 0
      become: true
      become_method: ansible.builtin.sudo

    - name: Define and start KVM masters on 3 node cluster
      ansible.builtin.command: virt-install --name {{ infraid.stdout }}-{{ item.name }} \
            --disk /ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-{{ item.name }}.qcow2,bus=virtio,size=120 \
            --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9.0 --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://{{ lbvip }}:1234/rhcos-live-rootfs.x86_64.img \
            ip={{ item.ip }}::{{ hostgw }}:{{ hostnw }}:{{ infraid.stdout }}-{{ item.name }}:enp1s0:none nameserver={{ hostns }} \
            coreos.inst.ignition_url=http://{{ lbvip }}:1234/{{ item.ignition }}.ign' --autostart
      register: createnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createnodes.rc == 0
      with_items:
        - { name: master-0, ignition: master, ip: "{{ master0ip }}" }
        - { name: master-1, ignition: master, ip: "{{ master1ip }}" }
        - { name: master-2, ignition: master, ip: "{{ master2ip }}" }
      become: true
      become_method: sudo
      when: sno == "false"

    - name: Define and start KVM VMs when SNO
      ansible.builtin.command: virt-install --name {{ infraid.stdout }}-{{ item.name }} \
            --disk /ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-{{ item.name }}.qcow2,bus=virtio,size=120 \
            --ram "{{ master_mem }}" --cpu host --vcpus "{{ master_cpu }}" --os-variant rhel9.0 --pxe --network network={{ kvmnetwork }},model=virtio \
            --location rhcos-install/ --noautoconsole \
            --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
            coreos.live.rootfs_url=http://{{ lbvip }}:1234/rhcos-live-rootfs.x86_64.img \
            ip={{ item.ip }}::{{ hostgw }}:{{ hostnw }}:{{ infraid.stdout }}-{{ item.name }}:enp1s0:none nameserver={{ hostns }} \
            coreos.inst.ignition_url=http://{{ lbvip }}:1234/{{ item.ignition }}.ign' --autostart
      register: createnodes
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createnodes.rc == 0
      with_items:
        - { name: master-0, ignition: master, ip: "{{ master0ip }}" }
      become: true
      become_method: ansible.builtin.sudo
      when: sno == "true"

    - name: Define and start KVM Workers
      ansible.builtin.command: virt-install --name {{ infraid.stdout }}-worker-{{ item }} \
               --disk /ocp-clusters/{{ clustername }}/{{ infraid.stdout }}-worker-{{ item }}.qcow2,bus=virtio,size=120 \
               --ram {{ worker_mem }} --cpu host --vcpus {{ worker_cpu }} --os-variant rhel9.0 --pxe --network network={{ kvmnetwork }},model=virtio \
               --location rhcos-install/ --noautoconsole \
               --extra-args 'nomodeset rd.neednet=1 coreos.inst=yes coreos.inst.install_dev=vda \
               coreos.live.rootfs_url=http://{{ lbvip }}:1234/rhcos-live-rootfs.x86_64.img \
               ip={{ worker_ips[item | int - 1] }}::{{ hostgw }}:{{ hostnw }}:{{ infraid.stdout }}-worker-{{ item }}:enp1s0:none nameserver={{ hostns }} \
               coreos.inst.ignition_url=http://{{ lbvip }}:1234/worker.ign' --autostart
      register: createworkers
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      changed_when: createworkers.rc == 0
      become: true
      become_method: ansible.builtin.sudo
      with_sequence: count={{ n_worker }}
      when: n_worker != 0

    - name: Sleeping for 20 minutes before to check if cluster has been installed
      ansible.builtin.pause:
        minutes: 20

    - name: Run wait-for install-complete
      ansible.builtin.command: "./openshift-install wait-for install-complete"
      args:
        chdir: "/ocp-clusters/{{ clustername }}"
      async: 3600
      poll: 0
      register: install
      changed_when: true

    - name: Check if the cluster has been installed
      ansible.builtin.async_status:
        jid: "{{ install.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      delay: 10
      retries: 600

    - name: Disabling master as worker
      kubernetes.core.k8s:
        kubeconfig: "/ocp-clusters/{{ clustername }}/auth/kubeconfig"
        state: present
        template: "scheduler.yaml.j2"
      when: sno != "true"

# FIX ME
#    - name: Remove bootstrap VM
#      community.libvirt.virt:
#        name: bootstrap
#        state: destroyed
#      when: clustertype == "upi" and infra == "kvm"

    - name: Pause cronjob ocp-csr-approver
      kubernetes.core.k8s:
        kubeconfig: "/ocp-clusters/{{ clustername }}/auth/kubeconfig"
        state: present
        definition:
          apiVersion: batch/v1
          kind: CronJob
          metadata:
            name: "ocp-csr-approver"
            namespace: "ocp-csr-approver"
          spec:
            suspend: true
